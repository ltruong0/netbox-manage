---
- name: Get Backup Files
  delegate_to: localhost
  ansible.builtin.find:
    paths: "{{role_path}}/files/backups/"
  register: backup_files
  when: latest_backup_path is not defined

- name: Select Latest Backup
  set_fact:
    latest_backup_path: "{{ latest_backup.path }}"
  vars:
    latest_backup: "{{ backup_files.files | sort(attribute='mtime',reverse=true) | first }}"
  when: latest_backup_path is not defined

- name: Copy Backup to Remote Host
  ansible.builtin.copy:
    src: "{{latest_backup_path}}"
    dest: "{{ansible_user_dir}}/netbox.sql"
  when: latest_backup_path is defined
  notify: 
    - Cleanup Restoration Files

- name: Find Postgres Container Name
  ansible.builtin.shell: "docker ps --format {% raw %} {{.Names}} {% endraw %} | grep postgres"
  register: find_postgres
  ignore_errors: true 

- name: Register Container Name for Postgres
  ansible.builtin.set_fact:
    postgres_container_name: "{{find_postgres.stdout | default('netbox-docker_postgres_1', true)}}"

- name: Drop the Existing Database
  community.docker.docker_container_exec:
    container: "{{postgres_container_name}}"
    tty: true
    command: /bin/bash -l -c "psql -U {{POSTGRES_USER}} postgres -c 'drop database {{POSTGRES_DB}} WITH (FORCE)'"

- name: Copy SQL to Postgres Container
  ansible.builtin.shell: "docker cp {{ansible_user_dir}}/netbox.sql {{postgres_container_name}}/:netbox.sql"

- name: ReCreate Netbox Database
  community.docker.docker_container_exec:
    container: "{{postgres_container_name}}"
    tty: true
    command: /bin/bash -l -c "psql -U {{POSTGRES_USER}} postgres -c 'create database {{POSTGRES_DB}}'"

- name: Load Restoration SQL
  community.docker.docker_container_exec:
    container: "{{postgres_container_name}}"
    tty: true
    command: "psql -U {{POSTGRES_USER}} {{POSTGRES_DB}} -f netbox.sql"
    chdir: /
